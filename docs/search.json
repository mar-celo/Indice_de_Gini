[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Índice de Gini",
    "section": "",
    "text": "A desigualdade salarial entre os servidores públicos federais é um tema relevante para o debate sobre justiça distributiva e eficiência na gestão pública. Este relatório analisa a distribuição dos rendimentos utilizando o Índice de Gini, uma métrica amplamente utilizada para avaliar desigualdade de renda.\nO Índice de Gini permite medir a dispersão dos rendimentos dentro do funcionalismo, possibilitando uma análise mais detalhada da concentração salarial entre diferentes órgãos e carreiras. Compreender esse indicador é essencial para subsidiar políticas de gestão de pessoal e avaliar o impacto das estruturas salariais na administração pública.\nEssa métrica fornece um valor numérico que varia de 0 a 1, onde 0 representa igualdade perfeita (todas as pessoas possuem a mesma renda) e 1 representa desigualdade máxima (uma única pessoa detém toda a renda, enquanto as demais não possuem nenhuma) (Hoffmann 2006).\nAo calcular o Índice de Gini para a remuneração dos servidores públicos, é possível obter uma compreensão clara da distribuição salarial no setor público federal. Esse índice é frequentemente utilizado por economistas, pesquisadores e gestores para medir e comparar a desigualdade entre órgãos, carreiras e ao longo do tempo. A partir dessa análise, é possível identificar padrões de concentração salarial e avaliar o impacto de políticas de reajuste, progressão e reestruturação de carreiras.\nDentre os aspectos analisáveis com o Índice de Gini na remuneração dos servidores públicos federais, destacam-se:\n\nDisparidades salariais entre diferentes órgãos e carreiras;\nDiferenças de remuneração associadas a fatores demográficos, como gênero, raça e tempo de serviço;\nImpacto de políticas de valorização profissional na redução da desigualdade;\nEfeitos da progressividade ou regressividade dos planos de carreira;\nComparação da desigualdade salarial ao longo do tempo e em diferentes períodos de ajuste fiscal."
  },
  {
    "objectID": "index.html#por-subgrupo-de-carreiras",
    "href": "index.html#por-subgrupo-de-carreiras",
    "title": "Índice de Gini",
    "section": "Por Subgrupo de Carreiras",
    "text": "Por Subgrupo de Carreiras\n\n\nCódigo\n# Expandir a base de dados com base na quantidade de observações\ndf_expandido &lt;- df_gini %&gt;%\n  uncount(qtd)\n\n# Calculo do indice de gini por ano\n df_gini_subgrupo &lt;- df_expandido |&gt; \n  filter(Ano == \"2026\") |&gt; \n  group_by(subgrupo) |&gt;  \n  mutate(\n    total_remun = sum(remun, na.rm = TRUE),\n    gini_index = ifelse(total_remun &gt; 0, reldist::gini(remun), NA)\n  ) |&gt; \n  ungroup()\n \n df_gini_subgrupo &lt;- df_gini_subgrupo %&gt;% arrange(desc(gini_index))\n df_gini_subgrupo$subgrupo &lt;- factor(df_gini_subgrupo$subgrupo, levels = unique(df_gini_subgrupo$subgrupo))\n \n \n ano &lt;- unique(df_gini_subgrupo$Ano)\n mean_remun &lt;- mean(df_gini_subgrupo$remun, na.rm = TRUE)\n median_remun &lt;- median(df_gini_subgrupo$remun, na.rm = TRUE)\n bg_color &lt;- \"grey97\"\n font_family &lt;- \"Fira Sans\"\n \n \n # Formatar {mean_remun} para moeda brasileira R$ e {median_remun} para moeda brasileira R$ com o pacate scales formato brasil\n \n library(scales)\n \n # Criando um formatador para moeda brasileira\n format_brl &lt;- label_number(big.mark = \".\", decimal.mark = \",\", prefix = \"R$ \", , accuracy = 0.01)\n \n plot_subtitle &lt;- glue(\"A remuneração média é de {format_brl(mean_remun)} e a mediana é de {format_brl(median_remun)}.\n                       &lt;br&gt;\")\n \n \n # Gráfico com o boxplot e outras informações\n \n p &lt;- df_gini_subgrupo%&gt;% \n   ggplot(aes(subgrupo, remun)) +\n stat_halfeye(fill_type = \"segments\", alpha = 0.3, scale = 6) +\n   geom_boxplot(alpha = 0.1, outlier.shape = NA, colour = \"grey\" ) +\n  stat_interval(  ) +\n   stat_summary(geom = \"point\", fun = median) +\n   annotate(\"text\", x =11, y = 0, label = \"(\\U00F8 Índice de Gini)\",\n            family = \"Fira Sans\", size = 3, hjust = 0.5) +\n   stat_summary(\n     aes(y = gini_index),\n     geom = \"text\",\n     fun.data = function(x) {\n       data.frame(\n         y = 0,\n         label = sprintf(\"(%s)\", scales::number(mean(ifelse(x &gt; 0, x, NA), na.rm = TRUE), accuracy = 0.010)))},\n     family = font_family, size = 2.5\n   ) +\n   geom_hline(yintercept = median_remun, col = \"grey30\", lty = \"dashed\") +\n   annotate(\"text\", x = 11, y = median_remun + 50, label = \"Remuneração Mediana Geral\",\n            family = \"Fira Sans\", size = 3, hjust = 0)  +\n   scale_x_discrete(labels = toupper, expand = c(0, 1)) +\n   scale_y_continuous(breaks = seq(2500, 40000, 2500)) +\n   scale_color_manual(values = MetBrewer::met.brewer(\"VanGogh3\")) +\n   coord_flip(ylim = c(0, 55000), clip = \"off\") +\n   guides(col = \"none\") +\n   labs(\n     title = toupper(glue(\"Índice de Gini por subgrupo de servidores públicos no ano de {ano}.\")),\n     subtitle = plot_subtitle,\n     caption = \"Fonte: SIAPE\",\n     x = NULL,\n     y = \"Remuneração (R$)\"\n   ) +\n   theme_minimal(base_family = font_family, base_size = 10) +\n   theme(\n     plot.background = element_rect(color = NA, fill = bg_color),\n     panel.grid = element_blank(),\n     panel.grid.major.x = element_line(linewidth = 0.1, color = \"grey75\"),\n     plot.title = element_text(family = \"Fira Sans SemiBold\"),\n     plot.title.position = \"plot\",\n     plot.subtitle = element_textbox_simple(\n       margin = margin(t = 4, b = 4), size = 8),\n     plot.caption = element_textbox_simple(\n       margin = margin(t = 12), size = 7\n     ),\n     plot.caption.position = \"plot\",\n     axis.text.y = element_text(hjust = 0, margin = margin(r = 1.5), family = \"Fira Sans SemiBold\"),\n     plot.margin = margin(4, 14, 4, 4),\n    axis.text.x = element_text(angle = 45, hjust = 1)\n   )\n \n# p\nrent_title_words = readr::read_csv(\"data/rent_title_words.csv\")\n# create the dataframe for the legend (inside plot)\ndf_for_legend &lt;- rent_title_words %&gt;% \n  filter(word == \"beautiful\")\n\np_legend &lt;- df_for_legend %&gt;% \n  ggplot(aes(word, price)) +\n  stat_halfeye(fill_type = \"segments\", alpha = 0.3) +\n  stat_interval() +\n  stat_summary(geom = \"point\", fun = median) +\n  annotate(\n    \"richtext\",\n    x = c(0.8, 0.8, 0.8, 1.4, 1.8),\n    y = c(1000, 5000, 3000, 2400, 4000),\n    label = c(\"50 % dos servidores&lt;br&gt;recebem abaixo desse valor\", \"95 % dos servidores\", \n              \"80 % dos servidores\", \"Mediana\", \"Distribuição&lt;br&gt;da remuneração\"),\n    fill = NA, label.size = 0, family = font_family, size = 2, vjust = 1,\n  ) +\n  geom_curve(\n    data = data.frame(\n      x = c(0.9, 0.80, 0.80, 1.225, 1.8),\n      xend = c(0.95, 0.95, 0.95, 1.075, 1.8),\n      y = c(1000, 5000, 3000, 2300, 3800),\n      yend = c(1800, 5000, 3000, 2100, 2500)),\n    aes(x = x, xend = xend, y = y, yend = yend),\n    stat = \"unique\", curvature = 0.2, size = 0.2, color = \"grey12\",\n    arrow = arrow(angle = 20, length = unit(1, \"mm\"))\n  ) +\n  scale_color_manual(values = MetBrewer::met.brewer(\"VanGogh3\")) +\n  coord_flip(xlim = c(0.75, 1.3), ylim = c(0, 6000), expand = TRUE) +\n  guides(color = \"none\") +\n  labs(title = \"Legenda\") +\n  theme_void(base_family = font_family) +\n  theme(plot.title = element_text(family = \"Fira Sans SemiBold\", size = 9,\n                                  hjust = 0.075),\n        plot.background = element_rect(color = \"grey30\", size = 0.1, fill = bg_color))\n\n# p_legend\n# Insert the custom legend into the plot\np + inset_element(p_legend, l = 0.6, r = 1.0,  t = 0.86, b = 0.6, clip = FALSE)\n\nknitr::include_graphics(\"tidytuesday-temp/2025_01_31_10_04_47.190668.png\")\n\n\n\n\n\n\n\n\n\nCódigo\nknitr::include_graphics(\"tidytuesday-temp/2025_01_31_14_44_04.771656.png\")"
  },
  {
    "objectID": "index.html#por-escolaridade",
    "href": "index.html#por-escolaridade",
    "title": "Índice de Gini",
    "section": "Por Escolaridade",
    "text": "Por Escolaridade\n\n\nCódigo\n# Expandir a base de dados com base na quantidade de observações\ndf_expandido &lt;- df_gini %&gt;%\n  uncount(qtd)\n\n# Calculo do indice de gini por ano\n df_gini_subgrupo &lt;- df_expandido |&gt; \n  filter(Ano == \"2023\") |&gt; \n    group_by(escolaridade_cargo) |&gt;  \n  mutate(\n    total_remun = sum(remun, na.rm = TRUE),\n    gini_index = ifelse(total_remun &gt; 0, reldist::gini(remun), NA)\n  ) |&gt; \n  ungroup()\n \n df_gini_subgrupo &lt;- df_gini_subgrupo %&gt;% arrange(desc(gini_index))\n df_gini_subgrupo$escolaridade_cargo &lt;- factor(df_gini_subgrupo$escolaridade_cargo, levels = unique(df_gini_subgrupo$escolaridade_cargo))\n \n \n ano &lt;- unique(df_gini_subgrupo$Ano)\n mean_remun &lt;- mean(df_gini_subgrupo$remun, na.rm = TRUE)\n median_remun &lt;- median(df_gini_subgrupo$remun, na.rm = TRUE)\n bg_color &lt;- \"grey97\"\n font_family &lt;- \"Fira Sans\"\n \n \n # Formatar {mean_remun} para moeda brasileira R$ e {median_remun} para moeda brasileira R$ com o pacate scales formato brasil\n \n library(scales)\n \n # Criando um formatador para moeda brasileira\n format_brl &lt;- label_number(big.mark = \".\", decimal.mark = \",\", prefix = \"R$ \", , accuracy = 0.01)\n \n plot_subtitle &lt;- glue(\"A remuneração média é de {format_brl(mean_remun)} e a mediana é de {format_brl(median_remun)}.\n                       &lt;br&gt;\")\n \n \n # Gráfico com o boxplot e outras informações\n \n p &lt;- df_gini_subgrupo%&gt;% \n   ggplot(aes(escolaridade_cargo, remun)) +\n stat_halfeye(fill_type = \"segments\", alpha = 0.3, scale = 6) +\n   geom_boxplot(alpha = 0.1, outlier.shape = NA, colour = \"grey\" ) +\n  stat_interval(  ) +\n   stat_summary(geom = \"point\", fun = median) +\n   annotate(\"text\", x =5, y = 0, label = \"(\\U00F8 Índice de Gini)\",\n            family = \"Fira Sans\", size = 3, hjust = 0.5) +\n   stat_summary(\n     aes(y = gini_index),\n     geom = \"text\",\n     fun.data = function(x) {\n       data.frame(\n         y = 0,\n         label = sprintf(\"(%s)\", scales::number(mean(ifelse(x &gt; 0, x, NA), na.rm = TRUE), accuracy = 0.010)))},\n     family = font_family, size = 2.5\n   ) +\n   geom_hline(yintercept = median_remun, col = \"grey30\", lty = \"dashed\") +\n   annotate(\"text\", x = 5, y = median_remun + 50, label = \"Remuneração Mediana Geral\",\n            family = \"Fira Sans\", size = 3, hjust = 0)  +\n   scale_x_discrete(labels = toupper, expand = c(0, 1)) +\n   scale_y_continuous(breaks = seq(2500, 40000, 2500)) +\n   scale_color_manual(values = MetBrewer::met.brewer(\"VanGogh3\")) +\n   coord_flip(ylim = c(0, 40000), clip = \"off\") +\n   guides(col = \"none\") +\n   labs(\n     title = toupper(glue(\"Índice de Gini por subgrupo de servidores públicos no ano de {ano}.\")),\n     subtitle = plot_subtitle,\n     caption = \"Fonte: SIAPE\",\n     x = NULL,\n     y = \"Remuneração (R$)\"\n   ) +\n   theme_minimal(base_family = font_family, base_size = 10) +\n   theme(\n     plot.background = element_rect(color = NA, fill = bg_color),\n     panel.grid = element_blank(),\n     panel.grid.major.x = element_line(linewidth = 0.1, color = \"grey75\"),\n     plot.title = element_text(family = \"Fira Sans SemiBold\"),\n     plot.title.position = \"plot\",\n     plot.subtitle = element_textbox_simple(\n       margin = margin(t = 4, b = 4), size = 8),\n     plot.caption = element_textbox_simple(\n       margin = margin(t = 12), size = 7\n     ),\n     plot.caption.position = \"plot\",\n     axis.text.y = element_text(hjust = 0, margin = margin(r = 1.5), family = \"Fira Sans SemiBold\"),\n     plot.margin = margin(4, 14, 4, 4),\n    axis.text.x = element_text(angle = 45, hjust = 1)\n   )\n \n# p\nrent_title_words = readr::read_csv(\"data/rent_title_words.csv\")\n# create the dataframe for the legend (inside plot)\ndf_for_legend &lt;- rent_title_words %&gt;% \n  filter(word == \"beautiful\")\n\np_legend &lt;- df_for_legend %&gt;% \n  ggplot(aes(word, price)) +\n  stat_halfeye(fill_type = \"segments\", alpha = 0.3) +\n  stat_interval() +\n  stat_summary(geom = \"point\", fun = median) +\n  annotate(\n    \"richtext\",\n    x = c(0.8, 0.8, 0.8, 1.4, 1.8),\n    y = c(1000, 5000, 3000, 2400, 4000),\n    label = c(\"50 % dos servidores&lt;br&gt;recebem abaixo desse valor\", \"95 % dos servidores\", \n              \"80 % dos servidores\", \"Mediana\", \"Distribuição&lt;br&gt;da remuneração\"),\n    fill = NA, label.size = 0, family = font_family, size = 2, vjust = 1,\n  ) +\n  geom_curve(\n    data = data.frame(\n      x = c(0.9, 0.80, 0.80, 1.225, 1.8),\n      xend = c(0.95, 0.95, 0.95, 1.075, 1.8),\n      y = c(1000, 5000, 3000, 2300, 3800),\n      yend = c(1800, 5000, 3000, 2100, 2500)),\n    aes(x = x, xend = xend, y = y, yend = yend),\n    stat = \"unique\", curvature = 0.2, size = 0.2, color = \"grey12\",\n    arrow = arrow(angle = 20, length = unit(1, \"mm\"))\n  ) +\n  scale_color_manual(values = MetBrewer::met.brewer(\"VanGogh3\")) +\n  coord_flip(xlim = c(0.75, 1.3), ylim = c(0, 6000), expand = TRUE) +\n  guides(color = \"none\") +\n  labs(title = \"Legenda\") +\n  theme_void(base_family = font_family) +\n  theme(plot.title = element_text(family = \"Fira Sans SemiBold\", size = 9,\n                                  hjust = 0.075),\n        plot.background = element_rect(color = \"grey30\", size = 0.1, fill = bg_color))\n\n# p_legend\n# Insert the custom legend into the plot\np + inset_element(p_legend, l = 0.6, r = 1.0,  t = 0.56, b = 0.4, clip = TRUE)\n\nknitr::include_graphics(\"tidytuesday-temp/2025_01_31_15_13_35.783732.png\")\n\n\n\n\n\n\n\n\n\nCódigo\nknitr::include_graphics(\"tidytuesday-temp/2025_01_31_15_12_42.288213.png\")"
  },
  {
    "objectID": "index.html#por-órgão",
    "href": "index.html#por-órgão",
    "title": "Índice de Gini",
    "section": "Por Órgão",
    "text": "Por Órgão\nO Índice de Gini também pode ser calculado para diferentes órgãos do Poder Executivo Federal, permitindo uma análise mais detalhada da desigualdade salarial entre instituições. A seguir, apresentamos um gráfico demostrando a evolução do Índice de Gini por órgão no ano de 2023 e 2026.\nObserva-se que em 2026, em azul, o Índice de Gini apresentou uma redução em relação a 2023, em vermelho, para a maioria dos órgãos. Nos casos em que o Índice de Gini não apresentou redução, o gráfico apresenta apenas o indice em 2026\n\n\nCódigo\n# Expandir a base de dados com base na quantidade de observações\ndf_expandido &lt;- df_gini %&gt;%\n  uncount(qtd)\n\n# Calculo do indice de gini por ano\ndf_gini_orgao &lt;- df_expandido |&gt; \n  #filter(Ano == \"2023\") |&gt; \n  group_by(orgao_area, Ano) |&gt;  \n  summarise(\n    total_remun = sum(remun, na.rm = TRUE),\n    gini_index = ifelse(total_remun &gt; 0, reldist::gini(remun), NA)\n  ) |&gt; \n  select(-total_remun) |&gt;\n  ungroup() |&gt; \n  mutate(gini_index = round(gini_index, 2))\n  \n\n\n# pivotar wide \n\ndf_gini_orgao_wide &lt;- df_gini_orgao |&gt; \n  pivot_wider(names_from = Ano, values_from = gini_index) |&gt; \n  mutate(gap = `2023` - `2026`) |&gt; \n  group_by(orgao_area) |&gt;\n  mutate(\n    max=max(`2023`, `2026`)) |&gt;\n  ungroup() \n \n\n# Reordenando a variável orgao_area com base no gap em ordem decrescente\n\ndf_long_i &lt;- df_gini_orgao_wide |&gt; \n  arrange(desc(abs(gap))) |&gt; \n \n  mutate(labels=forcats::fct_reorder(orgao_area , abs(gap))) |&gt;\n  ungroup()\n \n\ndf_long &lt;- df_long_i %&gt;% select(-c(orgao_area))%&gt;% \n  pivot_longer(`2023`: `2026`, names_to = \"name\", values_to = \"value\") \n\nlibrary(forcats)\nlibrary(scales)\n\nnudge_value = 0.2\n\np_main &lt;- df_long %&gt;%\n  ggplot(aes(x = value, y = labels)) +\n  \n  # Linhas entre os pontos\n  geom_line(aes(group = labels), color = \"gray70\", linewidth = 2) +\n  \n  # Pontos com cores personalizadas\n  geom_point(aes(color = name), size = 3) +\n  \n  # Rótulos para os valores\n  geom_text(aes(label = label_number(accuracy = 0.001)(value), color = name),\n            size = 3,\n            fontface = \"bold\",\n            nudge_x = if_else(df_long$value == df_long$max, 0.02, -0.02),\n            hjust = if_else(df_long$value == df_long$max, 0, 1)) +\n  \n  # Adicionando legenda personalizada ao lado direito do gráfico\n  geom_text(aes(label = name, color = name),\n            data = df_long %&gt;% filter(gap == max(gap)),\n            nudge_y = 1,\n            fontface = \"bold\",\n            size = 3.5) +\n  \n  # Estilizando tema\n  theme_light(base_size = 12) + \n  theme(legend.position = \"none\",\n        axis.text.y = element_text(color = \"black\", size = 8),\n        axis.text.x = element_text(color = \"#666666\", size = 8),\n        axis.title = element_blank(),\n        panel.grid.major.y = element_line(color = \"gray90\", linetype = \"dashed\"),\n        panel.grid.minor = element_blank()) +\n  \n  # Título e legendas\n  labs(\n    title = \"Índice de Gini por Órgão (2023 e 2026)\",\n    caption = \"Fonte: SIAPE\",\n  ) +\n  \n  # Ajustando cores\n  scale_color_manual(values = c(\"#BF2F24\", \"#436685\")) +\n  \n  # Ajustando limites do gráfico\n  coord_cartesian(ylim = c(0, 50)) \n\nknitr::include_graphics(\"tidytuesday-temp/2025_02_03_14_45_21.663065.png\")"
  }
]