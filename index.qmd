---
title: "Índice de Gini"
subtitle: "Remuneração dos Servidores Públicos Federais"
author:
  - name: "CGINF - Coordenação Geral de Informações Gerenciais "
    affiliation: "DIGID - Diretoria de Governança e Inteligência de dados"
date: "`r Sys.Date()`"
abstract: |
  Este tutorial aborda o cálculo e a visualização do Índice de Gini, uma medida estatística amplamente utilizada para avaliar a desigualdade na distribuição de renda em populações ou regiões.
categories: [Carreiras, Remuneração, Funcionalismo Público, Índice de Gini, Desigualdade Salarial, Servidores Públicos Federais, SIAPE]  
format:
  html:
    toc: true
    toc-depth: 2
    number-sections: true
    number-depth: 1
    theme: cosmo  # Ou journal para um estilo mais formal
    highlight-style: github
    css: styles.css  # Arquivo customizado para ajustes
    code_folding: show
    code-fold: true
    toc_float:
      collapsed: false
---

# Introdução

A desigualdade salarial entre os servidores públicos federais é um tema relevante para o debate sobre justiça distributiva e eficiência na gestão pública. Este relatório analisa a distribuição dos rendimentos utilizando o **Índice de Gini**, uma métrica amplamente utilizada para avaliar desigualdade de renda.

O Índice de Gini permite medir a dispersão dos rendimentos dentro do funcionalismo, possibilitando uma análise mais detalhada da concentração salarial entre diferentes órgãos e carreiras. Compreender esse indicador é essencial para subsidiar políticas de gestão de pessoal e avaliar o impacto das estruturas salariais na administração pública.

Essa métrica fornece um valor numérico que varia de 0 a 1, onde 0 representa igualdade perfeita (todas as pessoas possuem a mesma renda) e 1 representa desigualdade máxima (uma única pessoa detém toda a renda, enquanto as demais não possuem nenhuma) [@hoffmann2006].

Ao calcular o Índice de Gini para a remuneração dos servidores públicos, é possível obter uma compreensão clara da distribuição salarial no setor público federal. Esse índice é frequentemente utilizado por economistas, pesquisadores e gestores para medir e comparar a desigualdade entre órgãos, carreiras e ao longo do tempo. A partir dessa análise, é possível identificar padrões de concentração salarial e avaliar o impacto de políticas de reajuste, progressão e reestruturação de carreiras.

Dentre os aspectos analisáveis com o Índice de Gini na remuneração dos servidores públicos federais, destacam-se:

-   Disparidades salariais entre diferentes órgãos e carreiras;
-   Impacto de políticas de valorização profissional na redução da desigualdade;
-   Efeitos da progressividade ou regressividade dos planos de carreira;
-   Comparação da desigualdade salarial ao longo do tempo e em diferentes períodos de ajuste fiscal.

# Cálculo do Índice de Gini

O Índice de Gini é calculado da seguinte maneira:

$$
G = \frac{\sum_{i=1}^{n} \sum_{j=1}^{n} |x_i - x_j|}{2n^2 \bar{x}}
$$

Onde:\
- ( G ) é o Índice de Gini.\
- ( n ) é o número de observações na amostra.\
- ( x_i ) são os valores ordenados da variável de renda.\
- ( x_j ) são os valores ordenados da mesma variável de renda.\
- ( \|\cdot\| ) representa o valor absoluto.\
- ( \bar{x} ) é a média da variável de renda.

# Análise dos Dados

Para ilustrar a aplicação do Índice de Gini na remuneração dos servidores públicos federais, utilizaremos dados do Sistema Integrado de Administração de Pessoal (SIAPE). Esses dados contêm informações sobre a remuneração de servidores do Poder Executivo Federal.

```{r, warning = FALSE, message = FALSE,  fig.width = 10, fig.height = 10, fig.align = "center"}
# carregar a base de dados em excel e compilar todas as abas em um único arquivo


# Carregando as bibliotecas necessárias
library(readxl)
library(dplyr)
library(purrr)
library(tidyr)
library(ggplot2)
library(ggtext)
library(ggdist)
library(glue)
library(patchwork)
library(camcorder)
library(gt)

library(ggstatsplot)
library(plotly)

#gg_record(dir = "tidytuesday-temp", device = "png", width = 10, height = 8, units = "in", dpi = 320)

# Define o caminho do arquivo
file_path <- "data/BaseDados_EstudoDesigualdades.xlsx"

# Obtém os nomes de todas as abas no Excel
sheet_names <- excel_sheets(file_path)

# excluir abas que não serão utilizadas 
# aba FORA 

sheet_names <- sheet_names[!sheet_names %in% c("FORA")]

# Lê todas as abas e combina em uma única base usando purrr::map
BaseDados_Unica <- sheet_names %>%
  map_df(~ read_excel(file_path, sheet = .x) %>%
           mutate(sheet_name = .x)) # Adiciona o nome da aba como coluna (opcional)

# preencher valores NA na coluna escolaridade_cargo com "Não Informado"



# filtrar apenas campos que possuem servidores

df_gini <- BaseDados_Unica |> janitor::clean_names() |> 
  replace_na(list(escolaridade_cargo = "Sem informação")) |>
  rename( "2026" = ano_2026,  "2023"= mai_23 ) |>
  pivot_longer(`2023`:`2026`, names_to = "Ano", values_to = "remun") |>
  filter(qtd > 0) 

df_gini %>%
    DT::datatable(rownames = FALSE, filter = "top",
                  options = list(pageLength = 5, scrollX = TRUE)) %>%
    DT::formatStyle(
        columns = names(df_gini), 
        target = "row",
        lineHeight = "12px",  # Reduz a altura das linhas
        fontSize = "12px"  # Reduz o tamanho da fonte
    )


```

## Por Subgrupo de Carreiras

::: panel-tabset
### 2023

```{r, warning = FALSE, message = FALSE,  fig.width = 10, fig.height = 10, fig.align = "center"}

# Expandir a base de dados com base na quantidade de observações
df_expandido <- df_gini %>%
  uncount(qtd)

# Calculo do indice de gini por ano
 df_gini_subgrupo <- df_expandido |> 
  filter(Ano == "2026") |> 
  group_by(subgrupo) |>  
  mutate(
    total_remun = sum(remun, na.rm = TRUE),
    gini_index = ifelse(total_remun > 0, reldist::gini(remun), NA)
  ) |> 
  ungroup()
 
 df_gini_subgrupo <- df_gini_subgrupo %>% arrange(desc(gini_index))
 df_gini_subgrupo$subgrupo <- factor(df_gini_subgrupo$subgrupo, levels = unique(df_gini_subgrupo$subgrupo))
 
 
 ano <- unique(df_gini_subgrupo$Ano)
 mean_remun <- mean(df_gini_subgrupo$remun, na.rm = TRUE)
 median_remun <- median(df_gini_subgrupo$remun, na.rm = TRUE)
 bg_color <- "grey97"
 font_family <- "Fira Sans"
 
 
 # Formatar {mean_remun} para moeda brasileira R$ e {median_remun} para moeda brasileira R$ com o pacate scales formato brasil
 
 library(scales)
 
 # Criando um formatador para moeda brasileira
 format_brl <- label_number(big.mark = ".", decimal.mark = ",", prefix = "R$ ", , accuracy = 0.01)
 
 plot_subtitle <- glue("A remuneração média é de {format_brl(mean_remun)} e a mediana é de {format_brl(median_remun)}.
                       <br>")
 
 
 # Gráfico com o boxplot e outras informações
 
 p <- df_gini_subgrupo%>% 
   ggplot(aes(subgrupo, remun)) +
 stat_halfeye(fill_type = "segments", alpha = 0.3, scale = 6) +
   geom_boxplot(alpha = 0.1, outlier.shape = NA, colour = "grey" ) +
  stat_interval(  ) +
   stat_summary(geom = "point", fun = median) +
   annotate("text", x =11, y = 0, label = "(\U00F8 Índice de Gini)",
            family = "Fira Sans", size = 3, hjust = 0.5) +
   stat_summary(
     aes(y = gini_index),
     geom = "text",
     fun.data = function(x) {
       data.frame(
         y = 0,
         label = sprintf("(%s)", scales::number(mean(ifelse(x > 0, x, NA), na.rm = TRUE), accuracy = 0.010)))},
     family = font_family, size = 2.5
   ) +
   geom_hline(yintercept = median_remun, col = "grey30", lty = "dashed") +
   annotate("text", x = 11, y = median_remun + 50, label = "Remuneração Mediana Geral",
            family = "Fira Sans", size = 3, hjust = 0)  +
   scale_x_discrete(labels = toupper, expand = c(0, 1)) +
   scale_y_continuous(breaks = seq(2500, 40000, 2500)) +
   scale_color_manual(values = MetBrewer::met.brewer("VanGogh3")) +
   coord_flip(ylim = c(0, 55000), clip = "off") +
   guides(col = "none") +
   labs(
     title = toupper(glue("Índice de Gini por subgrupo de servidores públicos no ano de {ano}.")),
     subtitle = plot_subtitle,
     caption = "Fonte: SIAPE",
     x = NULL,
     y = "Remuneração (R$)"
   ) +
   theme_minimal(base_family = font_family, base_size = 10) +
   theme(
     plot.background = element_rect(color = NA, fill = bg_color),
     panel.grid = element_blank(),
     panel.grid.major.x = element_line(linewidth = 0.1, color = "grey75"),
     plot.title = element_text(family = "Fira Sans SemiBold"),
     plot.title.position = "plot",
     plot.subtitle = element_textbox_simple(
       margin = margin(t = 4, b = 4), size = 8),
     plot.caption = element_textbox_simple(
       margin = margin(t = 12), size = 7
     ),
     plot.caption.position = "plot",
     axis.text.y = element_text(hjust = 0, margin = margin(r = 1.5), family = "Fira Sans SemiBold"),
     plot.margin = margin(4, 14, 4, 4),
    axis.text.x = element_text(angle = 45, hjust = 1)
   )
 

 # p
rent_title_words = readr::read_csv("data/rent_title_words.csv")
# create the dataframe for the legend (inside plot)
df_for_legend <- rent_title_words %>% 
  filter(word == "beautiful")

p_legend <- df_for_legend %>% 
  ggplot(aes(word, price)) +
  stat_halfeye(fill_type = "segments", alpha = 0.3) +
  stat_interval() +
  stat_summary(geom = "point", fun = median) +
  annotate(
    "richtext",
    x = c(0.8, 0.8, 0.8, 1.4, 1.8),
    y = c(1000, 5000, 3000, 2400, 4000),
    label = c("50 % dos servidores<br>recebem abaixo desse valor", "95 % dos servidores", 
              "80 % dos servidores", "Mediana", "Distribuição<br>da remuneração"),
    fill = NA, label.size = 0, family = font_family, size = 2, vjust = 1,
  ) +
  geom_curve(
    data = data.frame(
      x = c(0.9, 0.80, 0.80, 1.225, 1.8),
      xend = c(0.95, 0.95, 0.95, 1.075, 1.8),
      y = c(1000, 5000, 3000, 2300, 3800),
      yend = c(1800, 5000, 3000, 2100, 2500)),
    aes(x = x, xend = xend, y = y, yend = yend),
    stat = "unique", curvature = 0.2, size = 0.2, color = "grey12",
    arrow = arrow(angle = 20, length = unit(1, "mm"))
  ) +
  scale_color_manual(values = MetBrewer::met.brewer("VanGogh3")) +
  coord_flip(xlim = c(0.75, 1.3), ylim = c(0, 6000), expand = TRUE) +
  guides(color = "none") +
  labs(title = "Legenda") +
  theme_void(base_family = font_family) +
  theme(plot.title = element_text(family = "Fira Sans SemiBold", size = 9,
                                  hjust = 0.075),
        plot.background = element_rect(color = "grey30", size = 0.1, fill = bg_color))

# p_legend
# Insert the custom legend into the plot
#p + inset_element(p_legend, l = 0.6, r = 1.0,  t = 0.86, b = 0.6, clip = FALSE)

knitr::include_graphics("tidytuesday-temp/2025_01_31_10_04_47.190668.png")



```

### 2026

```{r, warning = FALSE, message = FALSE,  fig.width = 10, fig.height = 10, fig.align = "center"}
knitr::include_graphics("tidytuesday-temp/2025_01_31_14_44_04.771656.png")
```
:::

## Por Escolaridade

::: panel-tabset
### 2023

```{r, warning = FALSE, message = FALSE,  fig.width = 10, fig.height = 10, fig.align = "center"}

# Expandir a base de dados com base na quantidade de observações
df_expandido <- df_gini %>%
  uncount(qtd)

# Calculo do indice de gini por ano
 df_gini_subgrupo <- df_expandido |> 
  filter(Ano == "2026") |> 
    group_by(escolaridade_cargo) |>  
  mutate(
    total_remun = sum(remun, na.rm = TRUE),
    gini_index = ifelse(total_remun > 0, reldist::gini(remun), NA)
  ) |> 
  ungroup()
 
 
 
 df_gini_subgrupo <- df_gini_subgrupo %>% arrange(desc(gini_index))
 df_gini_subgrupo$escolaridade_cargo <- factor(df_gini_subgrupo$escolaridade_cargo, levels = unique(df_gini_subgrupo$escolaridade_cargo))
 
 
 ano <- unique(df_gini_subgrupo$Ano)
 mean_remun <- mean(df_gini_subgrupo$remun, na.rm = TRUE)
 median_remun <- median(df_gini_subgrupo$remun, na.rm = TRUE)
 bg_color <- "grey97"
 font_family <- "Fira Sans"
 
 
 # Formatar {mean_remun} para moeda brasileira R$ e {median_remun} para moeda brasileira R$ com o pacate scales formato brasil
 
 library(scales)
 
 # Criando um formatador para moeda brasileira
 format_brl <- label_number(big.mark = ".", decimal.mark = ",", prefix = "R$ ", , accuracy = 0.01)
 
 plot_subtitle <- glue("A remuneração média é de {format_brl(mean_remun)} e a mediana é de {format_brl(median_remun)}.
                       <br>")
 
 
 # Gráfico com o boxplot e outras informações
 
 p <- df_gini_subgrupo%>% 
   ggplot(aes(escolaridade_cargo, remun)) +
 stat_halfeye(fill_type = "segments", alpha = 0.3, scale = 6) +
   geom_boxplot(alpha = 0.1, outlier.shape = NA, colour = "grey" ) +
  stat_interval(  ) +
   stat_summary(geom = "point", fun = median) +
   annotate("text", x =5, y = 0, label = "(\U00F8 Índice de Gini)",
            family = "Fira Sans", size = 3, hjust = 0.5) +
   stat_summary(
     aes(y = gini_index),
     geom = "text",
     fun.data = function(x) {
       data.frame(
         y = 0,
         label = sprintf("(%s)", scales::number(mean(ifelse(x > 0, x, NA), na.rm = TRUE), accuracy = 0.010)))},
     family = font_family, size = 2.5
   ) +
   geom_hline(yintercept = median_remun, col = "grey30", lty = "dashed") +
   annotate("text", x = 5, y = median_remun + 50, label = "Remuneração Mediana Geral",
            family = "Fira Sans", size = 3, hjust = 0)  +
   scale_x_discrete(labels = toupper, expand = c(0, 1)) +
   scale_y_continuous(breaks = seq(2500, 40000, 2500)) +
   scale_color_manual(values = MetBrewer::met.brewer("VanGogh3")) +
   coord_flip(ylim = c(0, 40000), clip = "off") +
   guides(col = "none") +
   labs(
     title = toupper(glue("Índice de Gini por subgrupo de servidores públicos no ano de {ano}.")),
     subtitle = plot_subtitle,
     caption = "Fonte: SIAPE",
     x = NULL,
     y = "Remuneração (R$)"
   ) +
   theme_minimal(base_family = font_family, base_size = 10) +
   theme(
     plot.background = element_rect(color = NA, fill = bg_color),
     panel.grid = element_blank(),
     panel.grid.major.x = element_line(linewidth = 0.1, color = "grey75"),
     plot.title = element_text(family = "Fira Sans SemiBold"),
     plot.title.position = "plot",
     plot.subtitle = element_textbox_simple(
       margin = margin(t = 4, b = 4), size = 8),
     plot.caption = element_textbox_simple(
       margin = margin(t = 12), size = 7
     ),
     plot.caption.position = "plot",
     axis.text.y = element_text(hjust = 0, margin = margin(r = 1.5), family = "Fira Sans SemiBold"),
     plot.margin = margin(4, 14, 4, 4),
    axis.text.x = element_text(angle = 45, hjust = 1)
   )
 
# p
rent_title_words = readr::read_csv("data/rent_title_words.csv")
# create the dataframe for the legend (inside plot)
df_for_legend <- rent_title_words %>% 
  filter(word == "beautiful")

p_legend <- df_for_legend %>% 
  ggplot(aes(word, price)) +
  stat_halfeye(fill_type = "segments", alpha = 0.3) +
  stat_interval() +
  stat_summary(geom = "point", fun = median) +
  annotate(
    "richtext",
    x = c(0.8, 0.8, 0.8, 1.4, 1.8),
    y = c(1000, 5000, 3000, 2400, 4000),
    label = c("50 % dos servidores<br>recebem abaixo desse valor", "95 % dos servidores", 
              "80 % dos servidores", "Mediana", "Distribuição<br>da remuneração"),
    fill = NA, label.size = 0, family = font_family, size = 2, vjust = 1,
  ) +
  geom_curve(
    data = data.frame(
      x = c(0.9, 0.80, 0.80, 1.225, 1.8),
      xend = c(0.95, 0.95, 0.95, 1.075, 1.8),
      y = c(1000, 5000, 3000, 2300, 3800),
      yend = c(1800, 5000, 3000, 2100, 2500)),
    aes(x = x, xend = xend, y = y, yend = yend),
    stat = "unique", curvature = 0.2, size = 0.2, color = "grey12",
    arrow = arrow(angle = 20, length = unit(1, "mm"))
  ) +
  scale_color_manual(values = MetBrewer::met.brewer("VanGogh3")) +
  coord_flip(xlim = c(0.75, 1.3), ylim = c(0, 6000), expand = TRUE) +
  guides(color = "none") +
  labs(title = "Legenda") +
  theme_void(base_family = font_family) +
  theme(plot.title = element_text(family = "Fira Sans SemiBold", size = 9,
                                  hjust = 0.075),
        plot.background = element_rect(color = "grey30", size = 0.1, fill = bg_color))

# p_legend
# Insert the custom legend into the plot
#p + inset_element(p_legend, l = 0.6, r = 1.0,  t = 0.56, b = 0.4, clip = TRUE)

knitr::include_graphics("tidytuesday-temp/2025_02_03_18_36_37.816252.png")



```

### 2026

```{r, warning = FALSE, message = FALSE,  fig.width = 10, fig.height = 10, fig.align = "center"}

knitr::include_graphics("tidytuesday-temp/2025_02_03_18_38_37.843374.png")

```
:::

## Por Órgão

O Índice de Gini também pode ser calculado para diferentes órgãos do Poder Executivo Federal, permitindo uma análise mais detalhada da desigualdade salarial entre instituições. A seguir, apresentamos um gráfico demostrando a evolução do Índice de Gini por órgão no ano de 2023 e 2026.

Observa-se que em 2026, em azul, o Índice de Gini apresentou uma redução em relação a 2023, em vermelho, para a maioria dos órgãos. Nos casos em que o Índice de Gini não apresentou redução, o gráfico apresenta apenas o indice em 2026

```{r, warning = FALSE, message = FALSE,  fig.width = 10, fig.height = 10, fig.align = "center"}

# Expandir a base de dados com base na quantidade de observações
df_expandido <- df_gini %>%
  uncount(qtd)

# Calculo do indice de gini por ano
df_gini_orgao <- df_expandido |> 
  #filter(Ano == "2023") |> 
  group_by(orgao_area, Ano) |>  
  summarise(
    total_remun = sum(remun, na.rm = TRUE),
    gini_index = ifelse(total_remun > 0, reldist::gini(remun), NA)
  ) |> 
  select(-total_remun) |>
  ungroup() |> 
  mutate(gini_index = round(gini_index, 2))
  


# pivotar wide 

df_gini_orgao_wide <- df_gini_orgao |> 
  pivot_wider(names_from = Ano, values_from = gini_index) |> 
  mutate(gap = `2023` - `2026`) |> 
  group_by(orgao_area) |>
  mutate(
    max=max(`2023`, `2026`)) |>
  ungroup() 
 

# Reordenando a variável orgao_area com base no gap em ordem decrescente

df_long_i <- df_gini_orgao_wide |> 
  arrange(desc(abs(gap))) |> 
 
  mutate(labels=forcats::fct_reorder(orgao_area , abs(gap))) |>
  ungroup()
 

df_long <- df_long_i %>% select(-c(orgao_area))%>% 
  pivot_longer(`2023`: `2026`, names_to = "name", values_to = "value") 

library(forcats)
library(scales)

nudge_value = 0.2

p_main <- df_long %>%
  ggplot(aes(x = value, y = labels)) +
  
  # Linhas entre os pontos
  geom_line(aes(group = labels), color = "gray70", linewidth = 2) +
  
  # Pontos com cores personalizadas
  geom_point(aes(color = name), size = 3) +
  
  # Rótulos para os valores
  geom_text(aes(label = label_number(accuracy = 0.001)(value), color = name),
            size = 3,
            fontface = "bold",
            nudge_x = if_else(df_long$value == df_long$max, 0.02, -0.02),
            hjust = if_else(df_long$value == df_long$max, 0, 1)) +
  
  # Adicionando legenda personalizada ao lado direito do gráfico
  geom_text(aes(label = name, color = name),
            data = df_long %>% filter(gap == max(gap)),
            nudge_y = 1,
            fontface = "bold",
            size = 3.5) +
  
  # Estilizando tema
  theme_light(base_size = 12) + 
  theme(legend.position = "none",
        axis.text.y = element_text(color = "black", size = 8),
        axis.text.x = element_text(color = "#666666", size = 8),
        axis.title = element_blank(),
        panel.grid.major.y = element_line(color = "gray90", linetype = "dashed"),
        panel.grid.minor = element_blank()) +
  
  # Título e legendas
  labs(
    title = "Índice de Gini por Órgão (2023 e 2026)",
    caption = "Fonte: SIAPE",
  ) +
  
  # Ajustando cores
  scale_color_manual(values = c("#BF2F24", "#436685")) +
  
  # Ajustando limites do gráfico
  coord_cartesian(ylim = c(0, 50)) 

knitr::include_graphics("tidytuesday-temp/2025_02_03_14_45_21.663065.png")

```

::: panel-tabset
### 2023

```{r dotplot, warning=FALSE, message=FALSE}
set.seed(123)

p <- ggdotplotstats(
  data       = df_long |> filter(name == "2023"),
  y          = labels,
  x          = value,
  test.value = 55,
  type       = "robust",
  title      = "Indice de Gini por Órgão",
  xlab       = "Indice de Gini",
  ylab       = "Órgão",
  group      = name,  # Diferencia os anos por cor
  ggtheme    = theme_minimal(8)
) 

ggplotly(p)
```

### 2026

```{r}
set.seed(123)

p <- ggdotplotstats(
  data       = df_long |> filter(name == "2026"),
  y          = labels,
  x          = value,
  test.value = 55,
  type       = "robust",
  title      = "Indice de Gini por Órgão",
  xlab       = "Indice de Gini",
  ylab       = "Órgão",
  group      = name,  # Diferencia os anos por cor
  ggtheme    = theme_minimal(8)
) 

ggplotly(p)
```
:::

# Estatísticas descritivas da remuneração dos servidores públicos federais

```{r}
library(plotly)
library(ggplot2)

# Gráfico de barras para 'subgrupo', separado por 'ano'
p1 <- ggplot(df_expandido, aes(x = subgrupo)) +
  geom_bar(fill = "steelblue") +
  theme_minimal() +
  labs(title = "Distribuição por Subgrupo ", x = "Subgrupo", y = "Contagem") 
  #facet_wrap(~ Ano) # Separa os gráficos por ano

ggplotly(p1) # Transforma em um gráfico interativo



```

# Descritivas por ano

```{r, warning=FALSE, message=FALSE}
library(gtsummary)
library(dplyr)

# Criar tabelas separadas para cada ano
tabela_2023 <- df_expandido %>%
  filter(Ano == "2023") %>%
  select(subgrupo, remun) %>%
  tbl_summary(by = subgrupo) 
#  modify_caption("**Ano 2023**")

tabela_2026 <- df_expandido %>%
  filter(Ano == "2026") %>%
  select(subgrupo, remun) %>%
  tbl_summary(by = subgrupo)
 # modify_caption("**Ano 2026**")

# Empilhar as tabelas verticalmente
tabela_empilhada <- tbl_stack(
  list(tabela_2023, tabela_2026),
  group_header = c("Ano 2023", "Ano 2026") # Adiciona título para cada tabela
)

# Exibir a tabela empilhada
tabela_empilhada



```

# Demais estatísticas descritivas

::: panel-tabset
### 2023

```{r, warning=FALSE, message=FALSE}

library(dplyr)
library(scales)
library(gt)

gerar_resumo <- function(df, ano) {
  df %>%
    filter(Ano == ano) %>%
    group_by(subgrupo) %>%
    summarise(
      mean = label_dollar(big.mark = ".", decimal.mark = ",", prefix = "R$ ")(mean(remun, na.rm = TRUE)),
      sd = label_dollar(big.mark = ".", decimal.mark = ",", prefix = "R$ ")(sd(remun, na.rm = TRUE)),
      min = label_dollar(big.mark = ".", decimal.mark = ",", prefix = "R$ ")(min(remun, na.rm = TRUE)),
      max = label_dollar(big.mark = ".", decimal.mark = ",", prefix = "R$ ")(max(remun, na.rm = TRUE)),
      median = label_dollar(big.mark = ".", decimal.mark = ",", prefix = "R$ ")(median(remun, na.rm = TRUE)),
      cv = sd(remun, na.rm = TRUE) / mean(remun, na.rm = TRUE),
      n = n()
    )
}

gerar_tabela <- function(df_summary) {
  df_summary %>%
    gt() %>%
    tab_header(
      title = "Estatísticas Descritivas por Subgrupo"
    ) %>%
    tab_spanner(
      label = "Estatísticas",
      columns = c(mean, sd, min, max, median, cv)
    ) %>%
    cols_label(
      mean = "Média",
      sd = "Desvio Padrão",
      min = "Mínimo",
      max = "Máximo",
      median = "Mediana",
      cv = "Coeficiente de Variação",
      n = "Total de Observações"
    ) %>%
    fmt_currency(
      columns = vars(mean, sd, min, max, median),
      currency = "BRL",
      decimals = 2
    ) %>%
    fmt_number(
      columns = vars(cv),
      decimals = 2
    ) |> 
    tab_options(
      table.font.size = px(12)
    )
}

# Exemplo de uso:
df_summary <- gerar_resumo(df_expandido, "2023")
gerar_tabela(df_summary)



```

### 2026

```{r, warning=FALSE, message=FALSE}
df_summary <- gerar_resumo(df_expandido, "2026")
gerar_tabela(df_summary)

```
:::

# Comparação de anos em uma única tabela

```{r}
library(dplyr)
library(scales)
library(gt)

gerar_resumo_duplo <- function(df, ano1, ano2) {
  df_summary_ano1 <- df %>%
    filter(Ano == ano1) %>%
    group_by(subgrupo) %>%
    summarise(
      mean = mean(remun, na.rm = TRUE),
      sd = sd(remun, na.rm = TRUE),
      min = min(remun, na.rm = TRUE),
      max = max(remun, na.rm = TRUE),
      median = median(remun, na.rm = TRUE),
      cv = sd(remun, na.rm = TRUE) / mean(remun, na.rm = TRUE),
      n = n(),
      .groups = "drop"
    )

  df_summary_ano2 <- df %>%
    filter(Ano == ano2) %>%
    group_by(subgrupo) %>%
    summarise(
      mean = mean(remun, na.rm = TRUE),
      sd = sd(remun, na.rm = TRUE),
      min = min(remun, na.rm = TRUE),
      max = max(remun, na.rm = TRUE),
      median = median(remun, na.rm = TRUE),
      cv = sd(remun, na.rm = TRUE) / mean(remun, na.rm = TRUE),
      n = n(),
      .groups = "drop"
    )

  # Juntar os dois dataframes pela coluna 'subgrupo'
  df_summary <- df_summary_ano1 %>%
    inner_join(df_summary_ano2, by = "subgrupo", suffix = c(paste0("_", ano1), paste0("_", ano2))) %>%
    mutate(
      mean = paste0(
        label_dollar(big.mark = ".", decimal.mark = ",", prefix = "R$ ")(mean_2023),
        " -> ",
        label_dollar(big.mark = ".", decimal.mark = ",", prefix = "R$ ")(mean_2026)
      ),
      sd = paste0(
        label_dollar(big.mark = ".", decimal.mark = ",", prefix = "R$ ")(sd_2023),
        " -> ",
        label_dollar(big.mark = ".", decimal.mark = ",", prefix = "R$ ")(sd_2026)
      ),
      min = paste0(
        label_dollar(big.mark = ".", decimal.mark = ",", prefix = "R$ ")(min_2023),
        " -> ",
        label_dollar(big.mark = ".", decimal.mark = ",", prefix = "R$ ")(min_2026)
      ),
      max = paste0(
        label_dollar(big.mark = ".", decimal.mark = ",", prefix = "R$ ")(max_2023),
        " -> ",
        label_dollar(big.mark = ".", decimal.mark = ",", prefix = "R$ ")(max_2026)
      ),
      median = paste0(
        label_dollar(big.mark = ".", decimal.mark = ",", prefix = "R$ ")(median_2023),
        " -> ",
        label_dollar(big.mark = ".", decimal.mark = ",", prefix = "R$ ")(median_2026)
      ),
      cv = paste0(round(cv_2023, 2), " -> ", round(cv_2026, 2)),
      n = paste0(n_2023, " -> ", n_2026)
    ) %>%
    select(subgrupo, mean, sd, min, max, median, cv, n)

  return(df_summary)
}

gerar_tabela <- function(df_summary) {
  df_summary %>%
    gt() %>%
    tab_header(
      title = "Estatísticas Descritivas por Subgrupo (Comparação de Anos)"
    ) %>%
    tab_spanner(
      label = "Estatísticas (2023 -> 2026)",
      columns = c(mean, sd, min, max, median, cv)
    ) %>%
    cols_label(
      mean = "Média",
      sd = "Desvio Padrão",
      min = "Mínimo",
      max = "Máximo",
      median = "Mediana",
      cv = "Coeficiente de Variação",
      n = "Total de Observações"
    ) |> 
    tab_options(
      table.font.size = px(12)
    )
}

# Exemplo de uso:
df_summary <- gerar_resumo_duplo(df_expandido, "2023", "2026")
gerar_tabela(df_summary)

```




### Box Plot

::: panel-tabset
### 2023

```{r, warning=FALSE, message=FALSE}
library(ggplot2)
library(scales)  # Para formatar como moeda

gerar_boxplot <- function(df, ano) {
  ggplot(df |> filter(Ano == ano), aes(x = subgrupo, y = remun)) +
    geom_boxplot(fill = "skyblue", color = "black", alpha = 0.5) +  # Boxplot
    stat_summary(  # Adiciona a média como ponto
      fun = mean,  
      geom = "point",  
      shape = 18,  # Formato do ponto (estrela)
      size = 3,  
      color = "red"
    ) +
    stat_summary(  # Adiciona o valor da média como texto formatado
      fun = mean,  
      geom = "text",  
      aes(label = scales::label_dollar(prefix = "R$ ", big.mark = ".", decimal.mark = ",")(..y..)),  
      vjust = -0.5,  
      color = "red",  
      size = 3.5  
    ) +
    scale_y_continuous(labels = label_dollar(prefix = "R$ ", big.mark = ".", decimal.mark = ",")) +  # Formata eixo Y
    labs(
      title = paste("Distribuição de Remuneração por Subgrupo -", ano),
      x = "Subgrupo",
      y = "Remuneração"
    ) +
    annotate(
      "text", x = 1, y = max(df$remun, na.rm = TRUE), 
      label = "Média da Remuneração", 
      color = "red", size = 4, hjust = 0
    ) +  # Anotação no gráfico
    theme_minimal() +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1, size = 10)  # Rotaciona e reduz a fonte do eixo X
    )
}

# Exemplo de uso:
gerar_boxplot(df_expandido, "2023")




```

### 2026

```{r, warning=FALSE, message=FALSE}
gerar_boxplot(df_expandido, "2026")



```
:::


::: panel-tabset

# histograma

### 2023

```{r}
ggplot(df_expandido |> filter(Ano == "2023"), aes(x = remun)) +
  geom_histogram(binwidth = 500, fill = "lightgreen", alpha = 0.7) +
  facet_wrap(~subgrupo) +  # Facetando por subgrupo
  labs(
    title = "Distribuição da Remuneração por Subgrupo",
    x = "Remuneração",
    y = "Frequência"
  ) +
  theme_minimal()

```
### 2026 

```{r}

ggplot(df_expandido |> filter(Ano == "2026"), aes(x = remun)) +
  geom_histogram(binwidth = 500, fill = "lightgreen", alpha = 0.7) +
  facet_wrap(~subgrupo) +  # Facetando por subgrupo
  labs(
    title = "Distribuição da Remuneração por Subgrupo",
    x = "Remuneração",
    y = "Frequência"
  ) +
  theme_minimal()

```

:::




# Comparação de médias entre grupos

### 2023
```{r final,  warning=FALSE, message=FALSE}
# df_expandido |> filter(Ano == "2023") |> ggstatsplot::ggbetweenstats(
#   x = subgrupo,
#   y = remun,
#   title = "Distribuição de Remuneração por Subgrupo (2023)"
# )
```

### 2026

```{r final2,  warning=FALSE, message=FALSE}
# df_expandido |> filter(Ano == "2026") |> ggstatsplot::ggbetweenstats(
#   x = subgrupo,
#   y = remun,
#   title = "Distribuição de Remuneração por Subgrupo (2023)"
# )
```


# Referências
